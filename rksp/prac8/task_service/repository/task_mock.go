// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"sync"
	"task_service/domain"
)

// Ensure, that TaskRepositoryMock does implement TaskRepository.
// If this is not the case, regenerate this file with moq.
var _ TaskRepository = &TaskRepositoryMock{}

// TaskRepositoryMock is a mock implementation of TaskRepository.
//
//	func TestSomethingThatUsesTaskRepository(t *testing.T) {
//
//		// make and configure a mocked TaskRepository
//		mockedTaskRepository := &TaskRepositoryMock{
//			CreateTaskFunc: func(ctx context.Context, task *domain.Task) (string, error) {
//				panic("mock out the CreateTask method")
//			},
//			DeleteTaskFunc: func(ctx context.Context, id string) error {
//				panic("mock out the DeleteTask method")
//			},
//			ListTasksFunc: func(ctx context.Context) ([]*domain.Task, error) {
//				panic("mock out the ListTasks method")
//			},
//			TaskFunc: func(ctx context.Context, id string) (*domain.Task, error) {
//				panic("mock out the Task method")
//			},
//			UpdateTaskFunc: func(ctx context.Context, task *domain.Task) error {
//				panic("mock out the UpdateTask method")
//			},
//		}
//
//		// use mockedTaskRepository in code that requires TaskRepository
//		// and then make assertions.
//
//	}
type TaskRepositoryMock struct {
	// CreateTaskFunc mocks the CreateTask method.
	CreateTaskFunc func(ctx context.Context, task *domain.Task) (string, error)

	// DeleteTaskFunc mocks the DeleteTask method.
	DeleteTaskFunc func(ctx context.Context, id string) error

	// ListTasksFunc mocks the ListTasks method.
	ListTasksFunc func(ctx context.Context) ([]*domain.Task, error)

	// TaskFunc mocks the Task method.
	TaskFunc func(ctx context.Context, id string) (*domain.Task, error)

	// UpdateTaskFunc mocks the UpdateTask method.
	UpdateTaskFunc func(ctx context.Context, task *domain.Task) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateTask holds details about calls to the CreateTask method.
		CreateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Task is the task argument value.
			Task *domain.Task
		}
		// DeleteTask holds details about calls to the DeleteTask method.
		DeleteTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListTasks holds details about calls to the ListTasks method.
		ListTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Task holds details about calls to the Task method.
		Task []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateTask holds details about calls to the UpdateTask method.
		UpdateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Task is the task argument value.
			Task *domain.Task
		}
	}
	lockCreateTask sync.RWMutex
	lockDeleteTask sync.RWMutex
	lockListTasks  sync.RWMutex
	lockTask       sync.RWMutex
	lockUpdateTask sync.RWMutex
}

// CreateTask calls CreateTaskFunc.
func (mock *TaskRepositoryMock) CreateTask(ctx context.Context, task *domain.Task) (string, error) {
	if mock.CreateTaskFunc == nil {
		panic("TaskRepositoryMock.CreateTaskFunc: method is nil but TaskRepository.CreateTask was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Task *domain.Task
	}{
		Ctx:  ctx,
		Task: task,
	}
	mock.lockCreateTask.Lock()
	mock.calls.CreateTask = append(mock.calls.CreateTask, callInfo)
	mock.lockCreateTask.Unlock()
	return mock.CreateTaskFunc(ctx, task)
}

// CreateTaskCalls gets all the calls that were made to CreateTask.
// Check the length with:
//
//	len(mockedTaskRepository.CreateTaskCalls())
func (mock *TaskRepositoryMock) CreateTaskCalls() []struct {
	Ctx  context.Context
	Task *domain.Task
} {
	var calls []struct {
		Ctx  context.Context
		Task *domain.Task
	}
	mock.lockCreateTask.RLock()
	calls = mock.calls.CreateTask
	mock.lockCreateTask.RUnlock()
	return calls
}

// DeleteTask calls DeleteTaskFunc.
func (mock *TaskRepositoryMock) DeleteTask(ctx context.Context, id string) error {
	if mock.DeleteTaskFunc == nil {
		panic("TaskRepositoryMock.DeleteTaskFunc: method is nil but TaskRepository.DeleteTask was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteTask.Lock()
	mock.calls.DeleteTask = append(mock.calls.DeleteTask, callInfo)
	mock.lockDeleteTask.Unlock()
	return mock.DeleteTaskFunc(ctx, id)
}

// DeleteTaskCalls gets all the calls that were made to DeleteTask.
// Check the length with:
//
//	len(mockedTaskRepository.DeleteTaskCalls())
func (mock *TaskRepositoryMock) DeleteTaskCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteTask.RLock()
	calls = mock.calls.DeleteTask
	mock.lockDeleteTask.RUnlock()
	return calls
}

// ListTasks calls ListTasksFunc.
func (mock *TaskRepositoryMock) ListTasks(ctx context.Context) ([]*domain.Task, error) {
	if mock.ListTasksFunc == nil {
		panic("TaskRepositoryMock.ListTasksFunc: method is nil but TaskRepository.ListTasks was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListTasks.Lock()
	mock.calls.ListTasks = append(mock.calls.ListTasks, callInfo)
	mock.lockListTasks.Unlock()
	return mock.ListTasksFunc(ctx)
}

// ListTasksCalls gets all the calls that were made to ListTasks.
// Check the length with:
//
//	len(mockedTaskRepository.ListTasksCalls())
func (mock *TaskRepositoryMock) ListTasksCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListTasks.RLock()
	calls = mock.calls.ListTasks
	mock.lockListTasks.RUnlock()
	return calls
}

// Task calls TaskFunc.
func (mock *TaskRepositoryMock) Task(ctx context.Context, id string) (*domain.Task, error) {
	if mock.TaskFunc == nil {
		panic("TaskRepositoryMock.TaskFunc: method is nil but TaskRepository.Task was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockTask.Lock()
	mock.calls.Task = append(mock.calls.Task, callInfo)
	mock.lockTask.Unlock()
	return mock.TaskFunc(ctx, id)
}

// TaskCalls gets all the calls that were made to Task.
// Check the length with:
//
//	len(mockedTaskRepository.TaskCalls())
func (mock *TaskRepositoryMock) TaskCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockTask.RLock()
	calls = mock.calls.Task
	mock.lockTask.RUnlock()
	return calls
}

// UpdateTask calls UpdateTaskFunc.
func (mock *TaskRepositoryMock) UpdateTask(ctx context.Context, task *domain.Task) error {
	if mock.UpdateTaskFunc == nil {
		panic("TaskRepositoryMock.UpdateTaskFunc: method is nil but TaskRepository.UpdateTask was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Task *domain.Task
	}{
		Ctx:  ctx,
		Task: task,
	}
	mock.lockUpdateTask.Lock()
	mock.calls.UpdateTask = append(mock.calls.UpdateTask, callInfo)
	mock.lockUpdateTask.Unlock()
	return mock.UpdateTaskFunc(ctx, task)
}

// UpdateTaskCalls gets all the calls that were made to UpdateTask.
// Check the length with:
//
//	len(mockedTaskRepository.UpdateTaskCalls())
func (mock *TaskRepositoryMock) UpdateTaskCalls() []struct {
	Ctx  context.Context
	Task *domain.Task
} {
	var calls []struct {
		Ctx  context.Context
		Task *domain.Task
	}
	mock.lockUpdateTask.RLock()
	calls = mock.calls.UpdateTask
	mock.lockUpdateTask.RUnlock()
	return calls
}
